# -*- coding: utf-8 -*-
"""gdsa2018-lab0a-ManelSalvador.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10MKw4Z186ZPKbRetHQyJYHnLOg-AZ9Ml
"""

#T2 Mostrar la imatge

import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import numpy as np

img = mpimg.imread('buqyxtfslg.jpg')
plt.imshow(img)
plt.xticks([]), plt.yticks([])  # to hide tick values on X and Y axis
plt.show()

#T2 Mostrar la imatge

import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import numpy as np

img = mpimg.imread('ecqhilnctz.jpg')
plt.imshow(img)
plt.xticks([]), plt.yticks([])  # to hide tick values on X and Y axis
plt.show()

#T3 Buscar els punts d'interés

import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import numpy as np
import cv2

img1 = cv2.imread('buqyxtfslg.jpg')

# Initialize ORB detector
orb = cv2.ORB_create()

kp1, des1 = orb.detectAndCompute(img1,None)

# draw only keypoints location,not size and orientation
img_with_keypoints = cv2.drawKeypoints(img1,kp1,color=(0,255,0), flags=0, outImage=np.array([]))
plt.imshow(img_with_keypoints)
plt.xticks([]), plt.yticks([])  # to hide tick values on X and Y axis
plt.show()

#T3 Buscar els punts d'interés

import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import numpy as np
import cv2

img1 = cv2.imread('ecqhilnctz.jpg')

# Initialize ORB detector
orb = cv2.ORB_create()

# Detect the keypoints
kp1, des1 = orb.detectAndCompute(img1,None)

# draw only keypoints location,not size and orientation
img_with_keypoints = cv2.drawKeypoints(img1,kp1,color=(0,255,0), flags=0, outImage=np.array([]))
plt.imshow(img_with_keypoints)
plt.xticks([]), plt.yticks([])  # to hide tick values on X and Y axis
plt.show()

#T4 Buscar les parelles de punts d'interés

import numpy as np
import cv2 as cv
from matplotlib import pyplot as plt

img1 = cv.imread('buqyxtfslg.jpg',0)
img2 = cv.imread('ecqhilnctz.jpg',0)

orb = cv.ORB_create()

kp1, des1 = orb.detectAndCompute(img1,None)
kp2, des2 = orb.detectAndCompute(img2,None)

# create BFMatcher object
bf = cv.BFMatcher(cv.NORM_HAMMING, crossCheck=True)
# Match descriptors.
matches = bf.match(des1,des2)
# Sort them in the order of their distance.
matches = sorted(matches, key = lambda x:x.distance)
# Draw first 10 matches.
img3 = cv.drawMatches(img1,kp1,img2,kp2,matches[:10], None)

plt.imshow(img3)
plt.xticks([]), plt.yticks([])  # to hide tick values on X and Y axis
plt.show()

